<?php
/**
 * Implements hook_field_formatter_info().
 */
function vt_commerce_image_field_formatter_info() {
  return array(
    'vt_commerce_image_formatter' => array(
      'label' => t('VT Commerce Image'),
      'field types' => array('image'),
      'settings'  => array( //Array of the settings we'll create
        'zoom' => 1,
        'hoverZoom' => 1,
      ),
    ),
  );
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function vt_commerce_image_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();

  $element['zoom'] = array(
    '#type' => 'checkbox',
    '#description' => t('Check to enable zooming features in the large image area'),
    '#title' => t('Zooming'),
    '#default_value' => $settings['zoom'],
  );
  $element['hoverZoom'] = array(
    '#type' => 'checkbox',
    '#description' => t('Check to enable thumbnail zooming features in the large image area'),
    '#title' => t('Thumbnail Hover Zooming'),
    '#default_value' => $settings['hoverZoom'],
  );
  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function vt_commerce_image_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('@zoom <br />@hoverZoom', array(
    '@zoom' => ($settings['zoom'] == TRUE) ? 'Zooming enabled' : 'Zooming disabled',
  	'@hoverZoom' => ($settings['hoverZoom'] == TRUE) ? 'Thumbnail Hover Zooming enabled' : 'Thumbnail Hover Zooming  Zooming disabled',
  )); // we use t() for translation and placeholders to guard against attacks
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function vt_commerce_image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(); // Initialize the var
  $settings = $display['settings']; // get the settings

  // add the setting
  drupal_add_js(array('vt_commerce_image' => $settings), 'setting');

  $module_path = drupal_get_path('module', 'vt_commerce_image');

  $js = array();
  if ($settings['zoom']) {
    $js[] = $module_path . '/js/cloud-zoom.1.0.2.js';
    if ($settings['hoverZoom']) {
      $js[] = $module_path . '/js/image-enlarge.js';
    }
    $js[] = $module_path . '/js/vt_commerce_image.js';
  }

  $element = array(
  	'0' => array(
      'content' => array(
        '#child' => $items,
        '#theme' => 'vt_commerce_image_wrapper',
        '#setting' => $settings,
      ),
      '#attached' => array(
        'css' => array($module_path . '/css/vt_commerce_css.css'),
        'js' => $js,
      ),
    ),
  );

  return $element;
}

/**
 * Implement hook_theme()
 */
function vt_commerce_image_theme() {
  return array(
    'vt_commerce_image_wrapper' => array(
			'template'			  => 'templates/vt-commerce-image-wrapper',
      'render element'  => 'element',
    ),
		'vt_commerce_image_content' => array(
			'template'			=> 'templates/vt-commerce-image-content',
			'variables'     => array('item' => NULL, 'settings' => NULL),
    ),
  );
}

/**
 * Implement Preprocess Function
 *
 * @param array $variables
 */
function template_preprocess_vt_commerce_image_wrapper(&$variables) {
  if (!empty($variables['element']) && !empty($variables['element']['#child'])) {
    $items = $variables['element']['#child'];
    $settings = $variables['element']['#setting'];
    $variables['content'] = '';

    // looping to each image and theme it
    foreach ($items as $item) {
      $variables['content'] .= theme('vt_commerce_image_content', array('item' => $item, 'settings' => $settings));
    }
  }
}

/**
 * Implement Preprocess Function
 *
 * @param array $variables
 */
function template_preprocess_vt_commerce_image_content(&$variables) {
  $item = $variables['item'];
  $settings = $variables['settings'];

  // load the js and settings for js here
  if ($settings['zoom']) {
     $variables['zoom_image'] = image_style_url('vt_commerce_image_zoom', $item['uri']);
  }

  $variables['large_image'] = theme('image_style', array(
  																	'style_name' => 'vt_commerce_image_large',
                                    'path' => $item['uri']));

}

/**
 * Implement hook_image_default_styles()
 */
function vt_commerce_image_image_default_styles() {
  $styles = array(
    'vt_commerce_image_zoom' => array(
  		'effects' => array(
        array(
          'name' => 'image_resize',
          'data' => array(
            'width' => 960,
            'height' => 960,
          ),
          'weight' => 0,
        ),
      ),
    ),

    'vt_commerce_image_large' => array(
   		'effects' => array(
        array(
          'name' => 'image_resize',
          'data' => array(
            'width' => 320,
            'height' => 240,
          ),
          'weight' => 0,
        ),
      ),
    ),
   );

  return $styles;
}
